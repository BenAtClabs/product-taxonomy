#!/usr/bin/env ruby
# frozen_string_literal: true

require_relative "../application"
require_relative "../lib/cli"

UNSTABLE = "unstable"

cli = CLI.new([:version]) do |opts|
  opts.on("-V VERSION", "--version=VERSION", "Version of the documentation")
end
cli.parse!(ARGV)
cli.options.version ||= UNSTABLE
cli.options.force = true if cli.options.version == UNSTABLE # we want unstable to always update

puts("Generating `#{cli.options.version}` documentation files...")
cli.options_status

category_data = cli.parse_json("dist/categories.json").fetch("verticals")
attribute_data = cli.parse_json("dist/attributes.json").fetch("attributes")

DATA_TARGET = "docs/_data/#{cli.options.version}"
cli.write_file("#{DATA_TARGET}/sibling_groups.yml") do |file|
  file.write(Docs::SiblingGroupsSerializer.serialize(category_data))
  file.write("\n")
end
cli.write_file("#{DATA_TARGET}/search_index.json") do |file|
  file.write(Docs::SearchIndexSerializer.serialize(category_data))
  file.write("\n")
end
cli.write_file("#{DATA_TARGET}/attributes.yml") do |file|
  file.write(attribute_data.to_yaml(line_width: 1000))
  file.write("\n")
end

cli.write_file("docs/_releases/#{cli.options.version}.html") do |file|
  content = cli.read_file("docs/_releases/_template.html")
  content.gsub!("TITLE", cli.options.version.upcase)
  content.gsub!("TARGET", cli.options.version)
  github_target = if cli.options.version == UNSTABLE
    "tree/main/dist"
  else
    "releases/tag/v#{cli.options.version}"
  end
  content.gsub!("GH_URL", "https://github.com/Shopify/product-taxonomy/#{github_target}")

  file.write(content)
end
