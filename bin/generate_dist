#!/usr/bin/env ruby
# frozen_string_literal: true

require_relative "../config/environment"
require_relative "../config/cli"

@cli = CLI.new([:version, :locales]) do |opts|
  opts.on("-V VERSION", "--version=VERSION", "Version of the documentation")
  opts.on("-l LOCALES", "--locales=LOCALES", Array, "Locales to generate")
end
@cli.parse!(ARGV)
@cli.options.version ||= @cli.read_file("VERSION").strip

@cli.options.locales ||= ["en"]
if @cli.options.locales.map(&:downcase).include?("all")
  @cli.options.locales = @cli.glob("data/localizations/categories/*.yml").map { File.basename(_1, ".yml") }
end

def mappings_json
  @mappings_json ||= MappingRule.as_json(MappingRule.all, version: @cli.options.version)
end

def generate_dist_files(locale)
  @cli.write_file!("dist/#{locale}/categories.txt") do |file|
    file.write(Category.as_txt(Category.verticals, version: @cli.options.version, locale: locale))
    file.write("\n")
  end
  @cli.write_file!("dist/#{locale}/attributes.txt") do |file|
    file.write(Attribute.as_txt(Attribute.base, version: @cli.options.version, locale: locale))
    file.write("\n")
  end
  @cli.write_file!("dist/#{locale}/attribute_values.txt") do |file|
    file.write(Value.as_txt(Value.all, version: @cli.options.version, locale: locale))
    file.write("\n")
  end

  categories_json = Category.as_json(Category.verticals, version: @cli.options.version, locale: locale)
  attributes_json = Attribute.as_json(Attribute.base, version: @cli.options.version, locale: locale)
  values_json = Value.as_json(Value.all, version: @cli.options.version, locale: locale)

  @cli.write_file!("dist/#{locale}/taxonomy.json") do |file|
    file.write(JSON.pretty_generate(categories_json.merge(attributes_json)))
    file.write("\n")
  end
  @cli.write_file!("dist/#{locale}/categories.json") do |file|
    file.write(JSON.pretty_generate(categories_json))
    file.write("\n")
  end
  @cli.write_file!("dist/#{locale}/attributes.json") do |file|
    file.write(JSON.pretty_generate(attributes_json))
    file.write("\n")
  end
  @cli.write_file!("dist/#{locale}/attribute_values.json") do |file|
    file.write(JSON.pretty_generate(values_json))
    file.write("\n")
  end
  if locale == "en"
    @cli.write_file!("dist/#{locale}/integrations/all_mappings.json") do |file|
      file.write(JSON.pretty_generate(mappings_json))
      file.write("\n")
    end

    mapping_groups = MappingRule.all.group_by { |record| [record.input_version, record.output_version] }
    mapping_groups.each do |_, records|
      directory_path = "dist/#{locale}/integrations/#{records.first.integration.name}"
      input_version = records.first.input_version.gsub("/", "_")
      output_version = records.first.output_version.gsub("/", "_")
      @cli.write_file!("#{directory_path}/#{input_version}_to_#{output_version}.txt") do |file|
        file.write(MappingRule.as_txt(records, version: @cli.options.version))
        file.write("\n")
      end
      @cli.write_file!("#{directory_path}/#{input_version}_to_#{output_version}.json") do |file|
        file.write(JSON.pretty_generate(MappingRule.as_json(records, version: @cli.options.version)))
        file.write("\n")
      end
    end
  end
end

puts("Generating `#{@cli.options.version}` distribution files for #{@cli.options.locales.join(", ")}...")
@cli.options_status

@cli.options.locales.each { generate_dist_files(_1) }
