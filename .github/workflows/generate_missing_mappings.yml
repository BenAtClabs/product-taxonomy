name: Generate and commit taxonomy mapping changes to requested PR

on:
  issue_comment:
    types: [created]

concurrency:
  group: "generate_mappings"
  cancel-in-progress: false

jobs:
  generate_missing_mappings:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
    if: ${{github.event.issue.pull_request && github.event.comment.body == '/generate_mappings'}}
    outputs:
      skip_workflow: ${{ steps.check_files.outputs.skip_workflow }}

    steps:
    - uses: actions/checkout@v4
    - name: Checkout PR
      run: gh pr checkout $ISSUE
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        ISSUE: ${{ github.event.issue.html_url }}
    - name: Get changed files
      id: changed-files
      uses: tj-actions/changed-files@v44
    - name: Check for Makefile changes
      id: check_files
      run: |
        changed_files="${{ steps.changed-files.outputs.all_changed_files }}"
        if echo "$changed_files" | grep -qE "^(Makefile)$"; then
          echo "Makefile changed, stopping workflow"
          echo "skip_workflow=true" >> $GITHUB_OUTPUT
        else
          echo "No Makefile changes, proceeding with workflow"
          echo "skip_workflow=false" >> $GITHUB_OUTPUT
        fi
    - uses: ruby/setup-ruby@v1
      if: steps.check_files.outputs.skip_workflow != 'true'
      with:
        bundler-cache: true
    - name: Set up Podman
      if: steps.check_files.outputs.skip_workflow != 'true'
      run: |
        sudo apt-get update
        sudo apt-get -y install podman
    - name: Launch Qdrant server
      if: steps.check_files.outputs.skip_workflow != 'true'
      run: |
        port=6333
        podman run -d -p ${port}:${port} qdrant/qdrant
        echo "Waiting for Qdrant server to be ready..."
        sleep 25
    - uses: cue-lang/setup-cue@v1.0.0
      if: steps.check_files.outputs.skip_workflow != 'true'
      with:
        version: 'v0.7.0'
    - name: Seed database
      if: steps.check_files.outputs.skip_workflow != 'true'
      run: make seed
    - name: Generate missing mappings
      if: steps.check_files.outputs.skip_workflow != 'true'
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        OPENAI_API_BASE: https://openai-proxy.shopify.ai/v1
      run: |
        make generate_mappings
    - name: Clean cache and re-generate mapping distribution files
      if: steps.check_files.outputs.skip_workflow != 'true'
      run: |
        make clean
        make VERBOSE=1
    - name: Upload generated files
      if: steps.check_files.outputs.skip_workflow != 'true'
      uses: actions/upload-artifact@v3
      with:
        name: generated-mappings
        path: |
          dist/*/integrations
          data/integrations
          tmp/mappings_with_low_confidence.txt

  commit_changes:
    runs-on: ubuntu-latest
    needs: generate_missing_mappings
    if: ${{ needs.generate_missing_mappings.outputs.skip_workflow != 'true' }}
    permissions:
      contents: write
      pull-requests: write
    steps:
    - uses: actions/checkout@v4
    - name: Checkout PR
      run: gh pr checkout $ISSUE
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        ISSUE: ${{ github.event.issue.html_url }}
    - name: Download generated files
      uses: actions/download-artifact@v3
      with:
        name: generated-mappings
    - name: Commit mapping changes
      id: commit_changes
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git add dist/*/integrations
        git add data/integrations
        commit_output=$(git commit -m "ðŸ¤– Update missing mappings" || echo "No changes to commit")
        echo "$commit_output"
        echo "commit_message<<EOF" >> $GITHUB_ENV
        echo "$commit_output" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        git push || echo "No changes to push"
    - name: Read disagree mapping entries
      id: read_content
      run: |
        if [ -f tmp/mappings_with_low_confidence.txt ]; then
          low_confidence_mappings=$(cat tmp/mappings_with_low_confidence.txt)
        else
          low_confidence_mappings="All generated mappings are high confidence."
        fi
        echo "low_confidence_mappings<<EOF" >> $GITHUB_ENV
        echo "$low_confidence_mappings" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
    - name: Add mapping grading comment to PR
      if: env.commit_message != 'No changes to commit'
      uses: actions/github-script@v6
      with:
        script: |
          const body = process.env.low_confidence_mappings;
          github.rest.issues.createComment({
            issue_number: ${{ github.event.issue.number }},
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          })
